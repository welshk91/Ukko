package com.github.welshk.ukko.utils

import android.Manifest
import android.content.Context
import android.content.pm.PackageManager
import android.location.Location
import androidx.activity.ComponentActivity
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.app.ActivityCompat
import com.google.android.gms.location.FusedLocationProviderClient

/**
 * Utility class to location methods
 */
object LocationUtil {
    fun permissionRequest(
        activity: ComponentActivity,
        fineAccess: () -> Unit = {},
        coarseAccess: () -> Unit = {},
        noAccess: () -> Unit = {}
    ): ActivityResultLauncher<Array<String>> {
        return activity.registerForActivityResult(
            ActivityResultContracts.RequestMultiplePermissions()
        ) { permissions ->
            when {
                permissions.getOrElse(Manifest.permission.ACCESS_FINE_LOCATION) { false } -> {
                    fineAccess.invoke()
                }
                permissions.getOrElse(Manifest.permission.ACCESS_COARSE_LOCATION) { false } -> {
                    coarseAccess.invoke()
                }
                else -> {
                    noAccess.invoke()
                }
            }
        }
    }

    fun getLastKnownLocation(
        context: Context,
        fusedLocationClient: FusedLocationProviderClient,
        success: (location: Location) -> Unit = {}
    ) {
        //if statement generated by Android Studio. Checks if permissions still valid and returns if not
        if (ActivityCompat.checkSelfPermission(
                context,
                Manifest.permission.ACCESS_FINE_LOCATION
            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                context,
                Manifest.permission.ACCESS_COARSE_LOCATION
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            return
        }

        fusedLocationClient.lastLocation.addOnSuccessListener {
            success.invoke(it)
        }
    }
}